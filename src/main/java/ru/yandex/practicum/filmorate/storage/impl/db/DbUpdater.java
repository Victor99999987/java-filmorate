package ru.yandex.practicum.filmorate.storage.impl.db;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Component
@Qualifier("DbUpdater")
public class DbUpdater extends DbStorage {

    public DbUpdater(JdbcTemplate jdbcTemplate) {
        super(jdbcTemplate);
    }

    public void update() {
        String sql;

        sql = "DROP TABLE IF EXISTS friendship CASCADE;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS films_genres CASCADE;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS likes CASCADE;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS films CASCADE;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS users CASCADE;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS mpa CASCADE;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS genres CASCADE;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS reviews CASCADE;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS reviews_likes CASCADE;";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS mpa (\n" +
                "  id integer  generated by default as identity PRIMARY KEY,\n" +
                "  name varchar(255) not null\n" +
                ");\n";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS genres (\n" +
                "  id integer generated by default as identity PRIMARY KEY,\n" +
                "  name varchar(255) not null\n" +
                ");\n";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS users (\n" +
                "  id integer generated by default as identity PRIMARY KEY,\n" +
                "  login varchar(255) not null,\n" +
                "  email varchar(255) not null,\n" +
                "  name varchar(255) not null,\n" +
                "  birthday date not null\n" +
                ");\n";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS films (\n" +
                "  id integer generated by default as identity PRIMARY KEY,\n" +
                "  name varchar(255) not null,\n" +
                "  description varchar(255) not null,\n" +
                "  releaseDate date not null,\n" +
                "  duration integer not null,\n" +
                "  mpa_id integer not null REFERENCES mpa(id)\n" +
                ");\n";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS likes (\n" +
                "  users_id integer not null REFERENCES users(id) on delete cascade,\n" +
                "  films_id integer not null REFERENCES films(id) on delete cascade\n" +
                ");";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS films_genres (\n" +
                "  films_id integer not null REFERENCES films(id) on delete cascade,\n" +
                "  genres_id integer not null REFERENCES genres(id) on delete cascade\n" +
                ");\n";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS friendship (\n" +
                "  users_id integer not null REFERENCES users(id) on delete cascade,\n" +
                "  friends_id integer not null REFERENCES users(id) on delete cascade,\n" +
                "  confirmed boolean not null\n" +
                ");\n";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS REVIEWS\n" +
                "(\n" +
                "    REVIEW_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n" +
                "    FILM_ID     INTEGER       NOT NULL,\n" +
                "    USER_ID     INTEGER       NOT NULL,\n" +
                "    CONTENT     VARCHAR(1024) NOT NULL,\n" +
                "    IS_POSITIVE BOOLEAN       NOT NULL,\n" +
                "    USEFUL      INTEGER       NOT NULL DEFAULT 0,\n" +
                "    CONSTRAINT REVIEW_PK PRIMARY KEY (REVIEW_ID),\n" +
                "    CONSTRAINT FK_REVIEWS_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE,\n" +
                "    CONSTRAINT FK_REVIEWS_FILM_ID FOREIGN KEY (FILM_ID) REFERENCES FILMS (ID) ON DELETE CASCADE\n" +
                ");";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS REVIEWS_LIKES\n" +
                "(\n" +
                "    REVIEW_ID INTEGER,\n" +
                "    USER_ID   INTEGER,\n" +
                "    IS_LIKE   BOOLEAN NOT NULL,\n" +
                "    CONSTRAINT PK_REVIEWS_LIKE PRIMARY KEY (REVIEW_ID, USER_ID),\n" +
                "    CONSTRAINT FK_REVIEWS_LIKE_REVIEWS_ID FOREIGN KEY (REVIEW_ID) REFERENCES REVIEWS (REVIEW_ID) ON DELETE CASCADE,\n" +
                "    CONSTRAINT FK_REVIEWS_LIKE_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE\n" +
                ");";
        jdbcTemplate.update(sql);

        sql = "CREATE UNIQUE INDEX IF NOT EXISTS REVIEWS_ID_INDEX ON REVIEWS (REVIEW_ID);";
        jdbcTemplate.update(sql);
    }
}