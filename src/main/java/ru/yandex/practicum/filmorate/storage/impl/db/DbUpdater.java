package ru.yandex.practicum.filmorate.storage.impl.db;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Component
@Qualifier("DbUpdater")
public class DbUpdater {

    private final JdbcTemplate jdbcTemplate;

    public DbUpdater(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void update() {
        String sql;

        sql = "DROP TABLE IF EXISTS friendship;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS films_genres;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS likes;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS films;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS users;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS mpa;";
        jdbcTemplate.update(sql);

        sql = "DROP TABLE IF EXISTS genres;";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS mpa (\n" +
                "  id integer  generated by default as identity PRIMARY KEY,\n" +
                "  name varchar(255) not null\n" +
                ");\n";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS genres (\n" +
                "  id integer generated by default as identity PRIMARY KEY,\n" +
                "  name varchar(255) not null\n" +
                ");\n";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS users (\n" +
                "  id integer generated by default as identity PRIMARY KEY,\n" +
                "  login varchar(255) not null,\n" +
                "  email varchar(255) not null,\n" +
                "  name varchar(255) not null,\n" +
                "  birthday date not null\n" +
                ");\n";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS films (\n" +
                "  id integer generated by default as identity PRIMARY KEY,\n" +
                "  name varchar(255) not null,\n" +
                "  description varchar(255) not null,\n" +
                "  releaseDate date not null,\n" +
                "  duration integer not null,\n" +
                "  mpa_id integer not null REFERENCES mpa(id)\n" +
                ");\n";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS likes (\n" +
                "  users_id integer not null REFERENCES users(id) on delete cascade,\n" +
                "  films_id integer not null REFERENCES films(id) on delete cascade\n" +
                ");";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS films_genres (\n" +
                "  films_id integer not null REFERENCES films(id) on delete cascade,\n" +
                "  genres_id integer not null REFERENCES genres(id) on delete cascade\n" +
                ");\n";
        jdbcTemplate.update(sql);

        sql = "CREATE TABLE IF NOT EXISTS friendship (\n" +
                "  users_id integer not null REFERENCES users(id) on delete cascade,\n" +
                "  friends_id integer not null REFERENCES users(id) on delete cascade,\n" +
                "  confirmed boolean not null\n" +
                ");\n";
        jdbcTemplate.update(sql);
    }
}
